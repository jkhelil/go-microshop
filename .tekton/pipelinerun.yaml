apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: go-microshop
  annotations:
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"
    pipelinesascode.tekton.dev/on-target-branch: "[main]"
    pipelinesascode.tekton.dev/max-keep-runs: "5"
    build.microshop.io/repo: https://github.com/jkheli/go-microshop.git?rev={{revision}}
    build.microshop.io/commit_sha: '{{revision}}'
    build.microshop.io/pull_request_number: '{{pull_request_number}}'
    build.microshop.io/target_branch: '{{target_branch}}'
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source
    tasks:
      - name: clone-repository
        params:
        - name: url
          value: $(params.repo_url)
        - name: revision
          value: $(params.revision)
        taskRef:
          params:
          - name: catalog
            value: tekton-catalog-tasks
          - name: type
            value: artifact
          - name: name
            value: git-clone
          - name: version
            value: "0.10.0"
          - name: kind
            value: task
          resolver: hub
        workspaces:
          - name: output
            workspace: source
      - name: build
        runAfter:
          - clone-repository
        taskSpec:
          steps:
          - name: build-step
            image: golang:1.24
            env:
              - name: GOCACHE
                value: $(workspaces.source.path)/go-build-cache/cache
              - name: GOMODCACHE
                value: $(workspaces.source.path)/go-build-cache/mod
            workingDir: $(workspaces.source.path)
            script: |
              #!/usr/bin/env bash
              set -eux
              make build
      - name: golangci-lint
        runAfter:
          - build
        taskSpec:
          steps:
          - name: lint-step
            image: golangci/golangci-lint:latest
            workingDir: $(workspaces.source.path)
            env:
              - name: GOCACHE
                value: $(workspaces.source.path)/go-build-cache/cache
              - name: GOMODCACHE
                value: $(workspaces.source.path)/go-build-cache/mod
              - name: GOLANGCILINT_CACHE
                value: $(workspaces.source.path)/go-build-cache/golangci-cache
            script: |
              #!/usr/bin/env bash
              set -eux
              make lint-go
      - name: unittest
        runAfter:
          - golangci-lint
        taskSpec:
          steps:
          - name: test-step
            image: golang:1.24
            env:
              - name: GOCACHE
                value: $(workspaces.source.path)/go-build-cache/cache
              - name: GOMODCACHE
                value: $(workspaces.source.path)/go-build-cache/mod
            workingDir: $(workspaces.source.path)
            script: |
              #!/usr/bin/env bash
              set -eux
              git config --global --add safe.directory $(workspaces.source.path)
              export GO_TEST_FLAGS="-v -race -coverprofile=coverage.txt -covermode=atomic"
              make test
      - name: coverage
        runAfter:
          - unittest
        taskSpec:
          steps:
          - name: coverage-step
            image: golang:1.24
            env:
              - name: CODECOV_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: go-microshop-codecov-token
                    key: token
              - name: GOCACHE
                value: $(workspaces.source.path)/go-build-cache/cache
              - name: GOMODCACHE
                value: $(workspaces.source.path)/go-build-cache/mod
              - name: GITHUB_REPOSITORY
                value: "{{repo_owner}}/{{repo_name}}"
              - name: GITHUB_PULL_REQUEST_ID
                value: "{{pull_request_number}}"
            workingDir: $(workspaces.source.path)
            script: |
              #!/usr/bin/env bash
              set -eux
              ARCH=$(uname -m)
              case $ARCH in
                  x86_64)
                      CODECOV_URL="https://uploader.codecov.io/v0.7.3/linux/codecov"
                      ;;
                  aarch64)
                      CODECOV_URL="https://uploader.codecov.io/v0.7.3/aarch64/codecov"
                      ;;
                  *)
                      echo "Unsupported architecture: $ARCH"
                      exit 1
                      ;;
              esac

              git config --global --add safe.directory $(workspaces.source.path)
              git fetch -a --tags
              curl -LOs $CODECOV_URL
              chmod +x ./codecov
              ./codecov -P $GITHUB_PULL_REQUEST_ID -C {{revision}} -v

  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 1Gi
