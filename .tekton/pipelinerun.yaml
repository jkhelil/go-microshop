---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: go-microshop-on-pull-request
  annotations:
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"
    pipelinesascode.tekton.dev/on-target-branch: "[main]"
    pipelinesascode.tekton.dev/max-keep-runs: "5"
    build.microshop.io/repo: https://github.com/jkheli/go-microshop.git?rev={{revision}}
    build.microshop.io/commit_sha: '{{revision}}'
    build.microshop.io/pull_request_number: '{{pull_request_number}}'
    build.microshop.io/target_branch: '{{target_branch}}'
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source
    tasks:
      - name: clone-repository
        params:
        - name: url
          value: $(params.repo_url)
        - name: revision
          value: $(params.revision)
        taskRef:
          params:
          - name: catalog
            value: tekton-catalog-tasks
          - name: type
            value: artifact
          - name: name
            value: git-clone
          - name: version
            value: "0.10.0"
          - name: kind
            value: task
          resolver: hub
        workspaces:
          - name: output
            workspace: source
      - name: build
        runAfter:
          - clone-repository
        taskSpec:
          steps:
            - name: build
              image: golang:1.24
              workingDir: $(workspaces.source.path)
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/go-build-cache/cache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/go-build-cache/mod
              script: |
                #!/usr/bin/env bash
                set -eux
                make build
          workspaces:
            - name: source
              workspace: source
      - name: golangci-lint
        runAfter:
          - build
        taskSpec:
          steps:
            - name: golangci-lint
              image: golangci/golangci-lint:latest
              workingDir: $(workspaces.source.path)
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/go-build-cache/cache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/go-build-cache/mod
                - name: GOLANGCILINT_CACHE
                  value: $(workspaces.source.path)/go-build-cache/golangci-cache
              script: |
                #!/usr/bin/env bash
                set -eux
                make lint-go
          workspaces:
            - name: source
              workspace: source
      - name: unittest
        runAfter:
          - golangci-lint
        taskSpec:
          steps:
            - name: unittest
              image: golang:1.24
              workingDir: $(workspaces.source.path)
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/go-build-cache/cache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/go-build-cache/mod
              script: |
                #!/usr/bin/env bash
                set -eux
                git config --global --add safe.directory $(workspaces.source.path)
                export GO_TEST_FLAGS="-v -race -coverprofile=coverage.txt -covermode=atomic"
                make test
          workspaces:
            - name: source
              workspace: source
      - name: coverage
        runAfter:
          - unittest
        taskSpec:
          steps:
            - name: coverage
              image: golang:1.24
              workingDir: $(workspaces.source.path)
              env:
                - name: CODECOV_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: go-microshop-codecov
                      key: token  
                - name: GOCACHE
                  value: $(workspaces.source.path)/go-build-cache/cache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/go-build-cache/mod
                - name: GITHUB_REPOSITORY
                  value: "{{repo_owner}}/{{repo_name}}"
                - name: GITHUB_PULL_REQUEST_ID
                  value: "{{pull_request_number}}"
              script: |
                ARCH=aarch64
                git config --global --add safe.directory $(workspaces.source.path)
                git fetch -a --tags
                curl -LOs https://uploader.codecov.io/v0.7.3/aarch64/codecov
                chmod +x ./codecov
                ./codecov -P $GITHUB_PULL_REQUEST_ID -C {{revision}} -v
          workspaces:
            - name: source
              workspace: source
  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi


